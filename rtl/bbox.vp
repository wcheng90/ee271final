/*
 * Bounding Box Module
 *     
 * Inputs: 
 *   3 x,y,z vertices corresponding to tri 
 *   1 valid bit, indicating triangle is valid data
 * 
 *  Config Inputs:
 *   2 x,y vertices indicating screen dimensions
 *   1 integer representing square root of SS (16MSAA->4)
 *      we will assume config values are held in some
 *      register and are valid given a valid polygon
 * 
 *  Control Input:
 *   1 halt signal indicating that no work should be done 
 * 
 * Outputs:
 *   2 vertices describing a clamped bounding box
 *   1 Valid signal indicating that bounding 
 *           box and triangle value is valid
 *   3 x,y vertices corresponding to tri
 * 
 * Global Signals: 
 *   clk, rst
 * 
 * Function:
 *   Determine a bounding box for the polygon
 *   represented by the vertices.
 * 
 *   Clamp the Bounding Box to the subsample pixel
 *   space
 *   
 *   Clip the Bounding Box to Screen Space
 *
 *   Halt operating but retain values if next stage is busy
 *
 * 
 * Long Description:
 *   This bounding box block accepts a polygon described with three
 *   vertices and determines a set of sample points to test against
 *   the micropolygon.  These sample points correspond to the 
 *   either the pixels in the final image or the pixel fragments 
 *   that compose the pixel if multisample anti-aliasing (MSAA)
 *   is enabled.
 * 
 *   The inputs to the box are clocked with a bank of dflops.  
 * 
 *   After the data is clocked, a bounding box is determined 
 *   for the micropolygon. A bounding box can be determined 
 *   through calculating the maxima and minima for x and y to 
 *   generate a lower left vertice and upper right
 *   vertice.  This data is then clocked.
 * 
 *   The bounding box next needs to be clamped to the fragment grid.
 *   This can be accomplished through rounding the bounding box values
 *   to the fragment grid.  Additionally, any sample points that exist
 *   outside of screen space should be rejected.  So the bounding box
 *   can be clipped to the visible screen space.  This clipping is done
 *   using the screen signal.
 *
 *   The Halt signal is utilized to hold the current polygon bounding box.
 *   This is because one bounding box operation could correspond to
 *   multiple sample test operations later in the pipe.  As these samples
 *   can take a number of cycles to complete, the data held in the bounding
 *   box stage needs to be preserved.  The halt signal is also required for 
 *   when the write device is full/busy.
 * 
 *   The valid signal is utilized to indicate whether or a polygon 
 *   is actual data.  This can be useful if the device being read from,
 *   has no more micropolygons.
 * 
 * 
 * 
 *   Author: John Brunhaver
 *   Created:      Thu 07/23/09
 *   Last Updated: Fri 09/30/10
 *
 *   Copyright 2009 <jbrunhaver@gmail.com>   
 */


/* ***************************************************************************
 * Change bar:
 * -----------
 * Date           Author    Description
 * Sep 19, 2012   jingpu    ported from John's original code to Genesis
 *                          
 * ***************************************************************************/

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
//; # module parameters
//; my $sig_fig    = parameter(Name=>'SigFig',
//;                            Val=>24, Min=>1, Step=>1, 
//;                            Doc=>"Bits in color and position.");
//; my $radix      = parameter(Name=>'Radix',
//;                            Val=>10, Min=>1, Step=>1, 
//;                            Doc=>"Fraction bits in color and position");
//; my $verts      = parameter(Name=>'Vertices',
//;                            Val=>3, Min=>3, Step=>1, 
//;                            Doc=>"Maximum Vertices in micropolygon");
//; my $axis       = parameter(Name=>'Axis',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of axis foreach vertex 3 is (x,y,z).");
//; my $colors     = parameter(Name=>'Colors',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of color channels");
//; my $pipe_depth = parameter(Name=>'PipelineDepth',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"How many pipe stages are in this block");

/* A Note on Signal Names:
 *
 * Most signals have a suffix of the form _RxxxxN 
 * where R indicates that it is a Raster Block signal
 * xxxx indicates the clock slice that it belongs to
 * N indicates the type of signal that it is.
 *    H indicates logic high, 
 *    L indicates logic low,
 *    U indicates unsigned fixed point, 
 *    S indicates signed fixed point.
 * 
 * For all the signed fixed point signals (logic signed [`$sig_fig`-1:0]),
 * their highest `$sig_fig-$radix` bits, namely [`$sig_fig-1`:`$radix`]
 * represent the integer part of the fixed point number, 
 * while the lowest `$radix` bits, namely [`$radix-1`:0]
 * represent the fractional part of the fixed point number.
 * 
 * 
 * 
 * For signal subSample_RnnnnU (logic [3:0])
 * 1000 for  1x MSAA eq to 1 sample per pixel
 * 0100 for  4x MSAA eq to 4 samples per pixel, 
 *              a sample is half a pixel on a side
 * 0010 for 16x MSAA eq to 16 sample per pixel,
 *              a sample is a quarter pixel on a side.  
 * 0001 for 64x MSAA eq to 64 samples per pixel, 
 *              a sample is an eighth of a pixel on a side.
 * 
 */



module `mname()`
  (
   //Input Signals
   input logic signed [`$sig_fig`-1:0] 	poly_R10S[`$verts`-1:0][`$axis`-1:0] , // Sets X,Y Fixed Point Values
   input logic 				unsigned [`$sig_fig`-1:0] color_R10U[`$colors`-1:0] , // Color of Poly
   input logic 				isQuad_R10H , // Is Poly Quad?
   input logic 				validPoly_R10H , // Valid Data for Operation

   //Control Signals
   input logic 				halt_RnnnnL , // Indicates No Work Should Be Done
   input logic signed [`$sig_fig`-1:0] 	screen_RnnnnS[1:0] , // Screen Dimensions
   input logic [3:0] 			subSample_RnnnnU , // SubSample_Interval

   //Global Signals
   input logic 				clk, // Clock 
   input logic 				rst, // Reset

   //Outout Signals
   output logic signed [`$sig_fig`-1:0] poly_R13S[`$verts`-1:0][`$axis`-1:0], // 4 Sets X,Y Fixed Point Values
   output logic 			unsigned [`$sig_fig`-1:0] color_R13U[`$colors`-1:0] , // Color of Poly
   output logic 			isQuad_R13H, // Is Poly Quad?
   output logic signed [`$sig_fig`-1:0] box_R13S[1:0][1:0], // 2 Sets X,Y Fixed Point Values  
   output logic 			validPoly_R13H                  // Valid Data for Operation
   );
   
   
   //Signals In Clocking Order

   //R10 Signals

   // Step 1 Result: LL and UR X, Y Fixed Point Values determined by calculating min/max vertices
   // box_R10S[0][0]: LL X
   // box_R10S[1][0]: UR X
   // box_R10S[1][1]: UR Y
   logic signed [`$sig_fig`-1:0] 	box_R10S[1:0][1:0];
   // Step 2 Result: LL and UR Rounded Down to SubSample Interval
   logic signed [`$sig_fig`-1:0] 	rounded_box_R10S[1:0][1:0];
   // Step 3 Result: LL and UR X, Y Fixed Point Values after Clipping
   logic signed [`$sig_fig`-1:0] 	out_box_R10S[1:0][1:0];      // bounds for output
   // Step 3 Result: valid if validPoly_R10H && BBox within screon
   logic 				outvalid_R10H;               // output is valid
   
   //////// DECLARE OTHER SIGNALS YOU NEED

   //R10 Signals
   
   // output for retiming registers
   logic signed [`$sig_fig`-1:0] 	poly_R13S_retime[`$verts`-1:0][`$axis`-1:0]; // 4 Sets X,Y Fixed Point Values
   logic 				unsigned [`$sig_fig`-1:0] color_R13U_retime[`$colors`-1:0];        // Color of Poly
   logic signed [`$sig_fig`-1:0] 	box_R13S_retime[1:0][1:0];             // 2 Sets X,Y Fixed Point Values  
   logic 				isQuad_R13H_retime;                   // Is Poly Quad?
   logic 				validPoly_R13H_retime ;                 // Valid Data for Operation
   // output for retiming registers


   // ********** Step 1:  Determining a Bounding Box ********** 

   //; # if( $verts == 4 ) {
   /* OLD QUAD CODE Used to be here */
   //; # }
   
   /* Note to the bold!!! */
   /* You can actually process more than
    * 3 vertices if you really want.
    * You can even do more than 4.
    * If you are interested in building
    * a paramaterized implementation
    * to evaluate N-vertice draw calls,
    * talk with John B.
    * */

   //; if( $verts == 3 ) {

   logic signed [`$sig_fig`-1:0] llx1 = (poly_R10S[0][0] < poly_R10S[1][0]) ? poly_R10S[0][0] : poly_R10S[1][0];
   logic signed [`$sig_fig`-1:0] lly1 = (poly_R10S[0][1] < poly_R10S[1][1]) ? poly_R10S[0][1] : poly_R10S[1][1];
   logic signed [`$sig_fig`-1:0] urx1 = poly_R10S[0][0] > poly_R10S[1][0] ? poly_R10S[0][0] : poly_R10S[1][0];
   logic signed [`$sig_fig`-1:0] ury1 = poly_R10S[0][1] > poly_R10S[1][1] ? poly_R10S[0][1] : poly_R10S[1][1];
   always_comb begin
   // box_R10S[0][0]: LL X
   // box_R10S[0][1]: LL Y <-- inferred
   // box_R10S[1][0]: UR X
   // box_R10S[1][1]: UR Y
   
   // LL X set
      box_R10S[0][0] = llx1 < poly_R10S[2][0] ? llx1 : poly_R10S[2][0];
   // LL Y set
      box_R10S[0][1] = lly1 < poly_R10S[2][1] ? lly1 : poly_R10S[2][1];
   // UR X set
      box_R10S[1][0] = urx1 > poly_R10S[2][0] ? urx1 : poly_R10S[2][0];
   // UR Y set
      box_R10S[1][1] = ury1 > poly_R10S[2][1] ? ury1 : poly_R10S[2][1];



   //////// PLACE YOUR CODE HERE
   //////// ASSIGN VALUES TO "box_R10S"


   end

   //; }  

   // ***************** End of Step 1 *********************


   // ********** Step 2:  Round Values to Subsample Interval **********

   // We will use the floor operation for rounding.
   // To floor a signal, we simply turn all of the bits
   // below a specific `$radix` to 0.
   // The complication here is that there are 4 setting.
   // 1x MSAA eq. to 1 sample per pixel
   // 4x MSAA eq to 4 samples per pixel, a sample is
   // half a pixel on a side
   // 16x MSAA eq to 16 sample per pixel, a sample is
   // a quarter pixel on a side.  
   // 64x MSAA eq to 64 samples per pixel, a sample is
   // an eighth of a pixel on a side.

   // Note: Cleverly converting the MSAA signal
   //       to a mask would allow you to do this operation
   //       as a bitwise and operation.

   
   logic[`$radix`-1:0] mask;
   //Round LowerLeft and UpperRight for X and Y
   //; for( my $i = 0 ; $i < 2 ; $i++ ) {
   //; 	for( my $j = 0 ; $j < 2 ; $j++ ) {
   always_comb begin
      
      mask = ~((1<<(`$radix`-subSample_RnnnnU)) -1);
      //Integer Portion of LL and UR Remains the Same 
      rounded_box_R10S[`$i`][`$j`][`$sig_fig`-1:`$radix`] 
     = box_R10S[`$i`][`$j`][`$sig_fig`-1:`$radix`];

      rounded_box_R10S[`$i`][`$j`][`$radix`-1:0]  
     = box_R10S[`$i`][`$j`][`$radix`-1:0] & mask;
      

      //////// PLACE YOUR CODE HERE
      //////// ASSIGN FRACTION PORTION

      
   end // always_comb

   //;		}
   //; }

   // ***************** End of Step 2 *********************


   // ********** Step 3:  Clipping or Rejection ********** 

   // Clamp if LL is down/left of screen origin
   // Clamp if UR is up/right of Screen
   // Invalid if BBox is up/right of Screen
   // Invalid if BBox is down/left of Screen
   // outvalid_R10H high if validPoly_R10H && BBox is valid

   always_comb begin

      //////// PLACE YOUR CODE HERE
      //////// ASSIGN "out_box_R10S" and "outvalid_R10H"    
    outvalid_R10H = ~((rounded_box_R10S[0][0] > screen_RnnnnS[0]) |
                        (rounded_box_R10S[0][1] > screen_RnnnnS[1]) |
                            (rounded_box_R10S[1][0] < `$sig_fig`'b0) |
                                (rounded_box_R10S[1][1] < `$sig_fig`'b0));

    out_box_R10S[0][0] = rounded_box_R10S[0][0] < `$sig_fig`'b0 ? 
              `$sig_fig`'b0 : rounded_box_R10S[0][0];

    out_box_R10S[0][1] = rounded_box_R10S[0][1] < `$sig_fig`'b0 ? 
              `$sig_fig`'b0 : rounded_box_R10S[0][1];

    out_box_R10S[1][0] = rounded_box_R10S[1][0] > screen_RnnnnS[0] ?
                screen_RnnnnS[0] : rounded_box_R10S[1][0];

    out_box_R10S[1][1] = rounded_box_R10S[1][1] > screen_RnnnnS[1] ?
                screen_RnnnnS[1] : rounded_box_R10S[1][1];

    end

   // ***************** End of Step 3 *********************


   
   //Flop Clamped Box to R13_retime with retiming registers
   //; my $d_bbx_r1 = generate( 'dff3', "d_bbx_r1", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$verts,
   //;                        ArraySize2=>$axis,
   //;                        PipelineDepth=>$pipe_depth-1,
   //;                        Retime=>'YES' );
   `$d_bbx_r1->instantiate()` (
			       .in(poly_R10S) , 
			       .clk(clk) , .reset(rst), .en(halt_RnnnnL),
			       .out(poly_R13S_retime));
   
   //; my $d_bbx_r2 = generate( 'dff2', "d_bbx_r2", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$colors,
   //;                        PipelineDepth=>$pipe_depth-1,
   //;                        Retime=>'YES' );
   `$d_bbx_r2->instantiate()`(
			      .in(color_R10U) , 
			      .clk(clk) , .reset(rst), .en(halt_RnnnnL),
			      .out(color_R13U_retime));
   
   //; my $d_bbx_r3 = generate( 'dff3', "d_bbx_r3", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>2,
   //;                        ArraySize2=>2,
   //;                        PipelineDepth=>$pipe_depth-1,
   //;                        Retime=>'YES' );
   `$d_bbx_r3->instantiate()` (
			       .in(out_box_R10S) , 
			       .clk(clk) , .reset(rst), .en(halt_RnnnnL),
			       .out(box_R13S_retime));
   
   //; my $d_bbx_r4 = generate( 'dff', "d_bbx_r4", 
   //;                        BitWidth=>2,
   //;                        PipelineDepth=>$pipe_depth-1,
   //;                        Retime=>'YES' );
   `$d_bbx_r4->instantiate()`(
			      .in({isQuad_R10H, outvalid_R10H}) , 
			      .clk(clk) , .reset(rst), .en(halt_RnnnnL),
			      .out({isQuad_R13H_retime, validPoly_R13H_retime}));
   //Flop Clamped Box to R13_retime with retiming registers
   
   
   
   //Flop R13_retime to R13 with fixed registers
   //; my $d_bbx_f1 = generate( 'dff3', "d_bbx_f1", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$verts,
   //;                        ArraySize2=>$axis,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d_bbx_f1->instantiate()` (
			       .in(poly_R13S_retime) , 
			       .clk(clk) , .reset(rst), .en(halt_RnnnnL),
			       .out(poly_R13S));
   
   //; my $d_bbx_f2 = generate( 'dff2', "d_bbx_f2", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$colors,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d_bbx_f2->instantiate()`(
			      .in(color_R13U_retime) , 
			      .clk(clk) , .reset(rst), .en(halt_RnnnnL),
			      .out(color_R13U));
   
   //; my $d_bbx_f3 = generate( 'dff3', "d_bbx_f3", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>2,
   //;                        ArraySize2=>2,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d_bbx_f3->instantiate()` (
			       .in(box_R13S_retime) , 
			       .clk(clk) , .reset(rst), .en(halt_RnnnnL),
			       .out(box_R13S));
   
   //; my $d_bbx_f4 = generate( 'dff', "d_bbx_f4", 
   //;                        BitWidth=>2,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d_bbx_f4->instantiate()`(
			      .in({isQuad_R13H_retime, validPoly_R13H_retime}) , 
			      .clk(clk) , .reset(rst), .en(halt_RnnnnL),
			      .out({isQuad_R13H, validPoly_R13H}));
   //Flop R13_retime to R13 with fixed registers


   //Error Checking Assertions

   //Define a Less Than Property
   //  
   //  a should be less than b
   property rb_lt( rst, a , b , c );
      @(posedge clk) rst | ((a<=b) | !c);
   endproperty

   //Check that Lower Left of Bounding Box is less than equal Upper Right
   assert property( rb_lt( rst, box_R13S[0][0] , box_R13S[1][0] , validPoly_R13H ));
   assert property( rb_lt( rst, box_R13S[0][1] , box_R13S[1][1] , validPoly_R13H ));
   //Check that Lower Left of Bounding Box is less than equal Upper Right
   
   //Error Checking Assertions

   
endmodule 








