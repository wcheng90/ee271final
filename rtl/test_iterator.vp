/*
 *  Bounding Box Sample Test Iteration
 *
 *  Inputs:
 *    BBox and MicroPolygon Information
 *
 *  Outputs:
 *    Subsample location and Micropolygon Information
 *
 *  Function:
 *    Iterate from left to right bottom to top
 *    across the bounding box.
 *
 *    While iterating set the halt signal in
 *    order to hold the bounding box pipeline in
 *    place.
 *
 *
 * Long Description:
 *    The iterator starts in the waiting state,
 *    when a valid micropolygon bounding box
 *    appears at the input. It will enter the
 *    testing state the next cycle with a
 *    sample equivelant to the lower left
 *    cooridinate of the bounding box.
 *
 *    While in the testing state, the next sample
 *    for each cycle should be one sample interval
 *    to the right, except when the current sample
 *    is at the right edge.  If the current sample
 *    is at the right edge, the next sample should
 *    be one row up.  Additionally, if the current
 *    sample is on the top row and the right edge,
 *    next cycles sample should be invalid and
 *    equivelant to the lower left vertice and
 *    next cycles state should be waiting.
 *
 *
 *   Author: John Brunhaver
 *   Created:      Thu 07/23/09
 *   Last Updated: Tue 10/01/10
 *
 *   Copyright 2009 <jbrunhaver@gmail.com>
 *
 */

/* ***************************************************************************
 * Change bar:
 * -----------
 * Date           Author    Description
 * Sep 19, 2012   jingpu    ported from John's original code to Genesis
 *
 * ***************************************************************************/

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
//; # module parameters
//; my $sig_fig    = parameter(Name=>'SigFig',
//;                            Val=>24, Min=>1, Step=>1,
//;                            Doc=>"Bits in color and position.");
//; my $radix      = parameter(Name=>'Radix',
//;                            Val=>10, Min=>1, Step=>1,
//;                            Doc=>"Fraction bits in color and position");
//; my $verts      = parameter(Name=>'Vertices',
//;                            Val=>3, Min=>3, Step=>1,
//;                            Doc=>"Maximum Vertices in micropolygon");
//; my $axis       = parameter(Name=>'Axis',
//;                            Val=>3, Min=>1, Step=>1,
//;                            Doc=>"Number of axis foreach vertex 3 is (x,y,z).");
//; my $colors     = parameter(Name=>'Colors',
//;                            Val=>3, Min=>1, Step=>1,
//;                            Doc=>"Number of color channels");
//; my $pipe_depth = parameter(Name=>'PipelineDepth',
//;                            Val=>1, Min=>1, Max=>1, Step=>1,
//;                            Doc=>"How many pipe stages are in this block");
//; my $mod_FSM = parameter(Name=>'ModifiedFSM',
//;                            Val=>'NO', List=>['YES', 'NO'],
//;                            Doc=>"Use Modified FSM to eliminate a wait state");
//;
//; # Convert a Fixed Point Number to a Floating
//; sub unFix {
//;   my $signal_name = shift @_;
//;   my $radix = shift @_;
//;   return " 1.0 * $signal_name / ( 128\'d1 << $radix ) ";
//; }

/* A Note on Signal Names:
 *
 * Most signals have a suffix of the form _RxxN
 * where R indicates that it is a Raster Block signal
 * xx indicates the clock slice that it belongs to
 * and N indicates the type of signal that it is.
 * H indicates logic high, L indicates logic low,
 * U indicates unsigned fixed point, and S indicates
 * signed fixed point.
 *
 * For all the signed fixed point signals (logic signed [`$sig_fig`-1:0]),
 * their highest `$sig_fig-$radix` bits, namely [`$sig_fig-1`:`$radix`]
 * represent the integer part of the fixed point number,
 * while the lowest `$radix` bits, namely [`$radix-1`:0]
 * represent the fractional part of the fixed point number.
 *
 *
 *
 * For signal subSample_RnnnnU (logic [3:0])
 * 1000 for  1x MSAA eq to 1 sample per pixel
 * 0100 for  4x MSAA eq to 4 samples per pixel,
 *              a sample is half a pixel on a side
 * 0010 for 16x MSAA eq to 16 sample per pixel,
 *              a sample is a quarter pixel on a side.
 * 0001 for 64x MSAA eq to 64 samples per pixel,
 *              a sample is an eighth of a pixel on a side.
 *
 */


module `mname()`
  (
   //Input Signals
   input logic signed [`$sig_fig`-1:0] 	poly_R13S[`$verts`-1:0][`$axis`-1:0], //Micropolygon to Iterate Over
   input logic unsigned [`$sig_fig`-1:0] color_R13U[`$colors`-1:0] , //Color of Poly
   input logic 				isQuad_R13H, //Micropolygon is quad
   input logic signed [`$sig_fig`-1:0] 	box_R13S[1:0][1:0], //Box to iterate for subsamples
   input logic 				validPoly_R13H, //Micropolygon is valid

   //Control Signals
   input logic [3:0] 			subSample_RnnnnU , //Subsample width
   output logic 			halt_RnnnnL , //Halt -> hold current micropoly
   //Note that this block generates
   //Global Signals
   input logic 				clk, // Clock
   input logic 				rst, // Reset

   //Outputs
   output logic signed [`$sig_fig`-1:0] poly_R14S[`$verts`-1:0][`$axis`-1:0], //Micropolygon to Sample Test
   output logic unsigned [`$sig_fig`-1:0] color_R14U[`$colors`-1:0] , //Color of Poly
   output logic signed [`$sig_fig`-1:0] sample_R14S[1:0], //Sample Location to Be Tested
   output logic 			isQuad_R14H, //Micropygon is quad
   output logic 			validSamp_R14H,                   //Sample and Micropolygon are Valid

//   output logic signed [`$sig_fig`-1:0] poly_R14S_2[`$verts`-1:0][`$axis`-1:0], //Micropolygon to Sample Test
//   output logic unsigned [`$sig_fig`-1:0] color_R14U_2[`$colors`-1:0] , //Color of Poly
   output logic signed [`$sig_fig`-1:0] sample_R14S_2[1:0], //Sample Location to Be Tested
//   output logic 			isQuad_R14H_2, //Micropygon is quad
   output logic 			validSamp_R14H_2                   //Sample and Micropolygon are Valid

   );


   // This module implement a Moore machine to iterarte sample points in bbox
   // Recall: a Moore machine is an FSM whose output values are determined
   // solely by its current state.
   // A simple way to build a Moore machine is to make states for every output
   // and the values of the current states are the outputs themselves

   // Now we create the signals for the next states of each outputs and
   // then instantiate registers for storing these states
   logic signed [`$sig_fig`-1:0] 	next_poly_R14S[`$verts`-1:0][`$axis`-1:0];
   logic unsigned  [`$sig_fig`-1:0] next_color_R14U[`$colors`-1:0] ;
   logic signed [`$sig_fig`-1:0] 	next_sample_R14S[1:0];
   logic 				next_isQuad_R14H;
   logic 				next_validSamp_R14H;
   logic 				next_halt_RnnnnL;


   // Instantiate registers for storing these states
   //; my $d301 = generate( 'dff3', "d301",
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$verts,
   //;                        ArraySize2=>$axis,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d301->instantiate()`(
			  .in(next_poly_R14S) ,
			  .clk(clk) , .reset(rst), .en(1'b1),
			  .out(poly_R14S));

   //; my $d302 = generate( 'dff2', "d302",
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$colors,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d302->instantiate()` (
			   .in(next_color_R14U) ,
			   .clk(clk) , .reset(rst), .en(1'b1),
			   .out(color_R14U));

   //; my $d303 = generate( 'dff2', "d303",
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>2,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d303->instantiate()` (
			   .in(next_sample_R14S) ,
			   .clk(clk) , .reset(rst), .en(1'b1),
			   .out(sample_R14S));

   //; my $d304 = generate( 'dff', "d304",
   //;                        BitWidth=>3,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d304->instantiate()` (
			   .in({next_validSamp_R14H, next_isQuad_R14H, next_halt_RnnnnL}) ,
			   .clk(clk) , .reset(rst), .en(1'b1),
			   .out({validSamp_R14H, isQuad_R14H, halt_RnnnnL}));
   // Instantiate registers for storing these states



   //; if ($mod_FSM eq 'NO') {

   //////
   //////  RTL code for original FSM Goes Here
   //////

   // To build this FSM we want to have two more state: one is the working
   // status of this FSM, and the other is the current bounding box where
   // we iterate sample points

   // define two more states, box_R14S and state_R14H
   logic signed [`$sig_fig`-1:0] 	box_R14S[1:0][1:0];    		// the state for current bounding box
   logic signed [`$sig_fig`-1:0] 	next_box_R14S[1:0][1:0];
   typedef enum logic {
			 WAIT_STATE, TEST_STATE
		       } state_t;
   state_t                        state_R14H;     //State Designation (Waiting or Testing)
   state_t                        next_state_R14H;        //Next Cycles State

   // instantiate registers for storing these two states
   //; my $d305 = generate( 'dff3', "d305",
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>2,
   //;                        ArraySize2=>2,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d305->instantiate()` (
			   .in(next_box_R14S) ,
			   .clk(clk) , .reset(rst), .en(1'b1),
			   .out(box_R14S));


/*
   //; my $d306 = generate( 'dff', "d306",
   //;                        BitWidth=>1,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d306->instantiate()` (
			   .in(next_state_R14H) ,
			   .clk(clk) , .reset(rst), .en(1'b1),
			   .out(state_R14H));
   */
   always_ff @(posedge clk) begin
      if(rst) state_R14H = WAIT_STATE;
      else    state_R14H = next_state_R14H;
   end



   // define some helper signals
   logic signed [`$sig_fig`-1:0] 	next_up_samp_R14S[1:0]; //If jump up, next sample
   logic signed [`$sig_fig`-1:0] 	next_rt_samp_R14S[1:0]; //If jump right, next sample
   logic 				at_right_edg_R14H;      //Current sample at right edge of bbox?
   logic 				at_top_edg_R14H;        //Current sample at top edge of bbox?
   logic 				at_end_box_R14H;        //Current sample at end of bbox?

   //////
   ////// First calculate the values of the helper signals using CURRENT STATES
   //////

   // check the comments 'A Note on Signal Names'
   // at the begining of the module for the help on
   // understanding the signals here

   ////// PLACE YOUR CODE HERE
// ******************************************************************
// ******************************************************************
// ******************************************************************
// ******************************************************************
// ******************************************************************
// ******************************************************************
// ******************************************************************


    logic[1:0] ss_w_lg2;
    always_comb begin
        case(subSample_RnnnnU)
        4'b0001 : ss_w_lg2 = 2'h3;
        4'b0010 : ss_w_lg2 = 2'h2;
        4'b0100 : ss_w_lg2 = 2'h1;
        4'b1000 : ss_w_lg2 = 2'h0;
        default : ss_w_lg2 = 2'h0;
        endcase
    end

    logic [`$radix+1`-1:0] incr;
    assign incr = (`$radix+1`'h1 << `$radix+1`'d`$radix`) >> ss_w_lg2;

    logic hit_back_valid;

    // Start out with helper signals!!
    assign at_top_edg_R14H   = (sample_R14S[1] == box_R14S[1][1]);
    assign at_right_edg_R14H = (sample_R14S[0] == box_R14S[1][0]) | (sample_R14S_2[0] == box_R14S[1][0]);
    assign at_end_box_R14H    = (at_top_edg_R14H & at_right_edg_R14H);

    // Right sample!
    assign next_rt_samp_R14S[0] = sample_R14S[0] + (incr << 1);
    assign next_rt_samp_R14S[1] = sample_R14S[1];

    // Up sample!
    assign next_up_samp_R14S[0] = box_R14S[0][0];
    assign next_up_samp_R14S[1] = sample_R14S[1] + incr;//subSample_RnnnnU;

    assign sample_R14S_2[0] = sample_R14S[0] + incr;
    assign sample_R14S_2[1] = sample_R14S[1];
    assign validSamp_R14H_2 = validSamp_R14H;

   //////
   ////// Then complete the following combinational logic defining the
   ////// next states
   //////


// ============== ""Test iterator hit detect"" ======================
// ============== ""Test iterator hit detect"" ======================
// ============== ""Test iterator hit detect"" ======================
    // Signals in Access Order
    logic signed [`$sig_fig`-1:0] 	 poly_shift_R16S[`$verts`-1:0][1:0]; // Micropolygon after coordinate shift
    logic signed [`$sig_fig`-1:0] 	 edge_R16S[3-1:0][1:0][1:0]; // Edges
    logic signed [2*`$sig_fig`-1:0] 	 dist_lg_R16S[3-1:0]; // Result of x_1 * y_2 - x_2 * y_1


    //; for( my $i = 0 ; $i < $verts ; $i++ ) {
    //;     for( my $j = 0 ; $j < 2 ; $j++ ) {
    always_comb begin
        // (1) Shift X, Y coordinates such that the fragment resides on the (0,0) position.
        poly_shift_R16S[`$i`][`$j`] = poly_R14S[`$i`][`$j`] - sample_R14S[`$j`];
    end
    //;     }
    //; }


    //; for( my $i = 0 ; $i < $verts ; $i++ ) {
    //;     for( my $k = 0 ; $k < 2 ; $k++ ) {
    always_comb begin
        // (2) Organize edges (form three edges for triangles)
        edge_R16S[`$i`][0][`$k`] = poly_shift_R16S[`$i`][`$k`];
        edge_R16S[`$i`][1][`$k`] = poly_shift_R16S[`($i+1)%3`][`$k`];
    end
    //;     }
    //; }


    //; for( my $i = 0 ; $i < $verts ; $i++ ) {
    always_comb begin
        //(3) Calculate distance x_1 * y_2 - x_2 * y_1
        dist_lg_R16S[`$i`] = edge_R16S[`$i`][0][0]*edge_R16S[`$i`][1][1] - edge_R16S[`$i`][1][0]*edge_R16S[`$i`][0][1];
    end
    //; }


    // Maybe we can check just the upper bit to see if its negative or not just to be fancy
    // Also does this need to match our conditionals in gold_test
    always_comb begin
        // (4) Check distance and assign hit_valid_R16H.
        hit_back_valid = (!dist_lg_R16S[0][47] & (|dist_lg_R16S[0][46:0])) & // dist[0] > 0
                         (!dist_lg_R16S[1][47]                           ) & // dist[1] >= 0
                         (!dist_lg_R16S[2][47] & (|dist_lg_R16S[2][46:0]));  // dist[2] > 0

    end


// ============== }}""Test iterator hit detect"" ======================
// ============== }}""Test iterator hit detect"" ======================
// ============== }}""Test iterator hit detect"" ======================



   ////// COMPLETE THE FOLLOW ALWAYS_COMB BLOCK

    always_comb begin
    unique case( state_R14H )
        ( TEST_STATE ): begin
            // if at right edge, go up!
            next_sample_R14S    = at_right_edg_R14H ? next_up_samp_R14S : next_rt_samp_R14S;
            //next_sample_R14S    = go_next_row ? next_up_samp_R14S : next_rt_samp_R14S;
            // if we're not at the end, we have more to go
            next_validSamp_R14H = ~(at_end_box_R14H | hit_back_valid);
            // pass through
            next_isQuad_R14H    = isQuad_R14H;
            // if at the end, wait. If more to go, continue testing
            next_state_R14H     = (at_end_box_R14H | hit_back_valid) ? WAIT_STATE : TEST_STATE;
            // pass through
            next_poly_R14S      = poly_R14S;
            // pass through
            next_color_R14U     = color_R14U;
            // pass through
            next_box_R14S       = box_R14S;
            // halt when we're still parsing current box
            next_halt_RnnnnL    = (at_end_box_R14H | hit_back_valid);
        end
        //( WAIT_STATE ): begin
        default : begin
            // pass through
            next_sample_R14S    = box_R13S[0];
            // pass through
            next_validSamp_R14H = validPoly_R13H;
            // pass through
            next_isQuad_R14H    = isQuad_R13H;
            // if valid, go to TEST_STATE. Else, stall
            next_state_R14H     = validPoly_R13H ? TEST_STATE : WAIT_STATE;
            // pass through
            next_poly_R14S      = poly_R13S;
            // pass through
            next_color_R14U     = color_R13U;
            // pass through
            next_box_R14S       = box_R13S;
            // if incoming valid box, halt!
            next_halt_RnnnnL    = ~validPoly_R13H;
        end
        endcase // case ( state_R14H )

    end //always_comb
// ******************************************************************
// ******************************************************************
// ******************************************************************
// ******************************************************************
// ******************************************************************
// ******************************************************************
// ******************************************************************


   //////
   //////  RTL code for original FSM Finishes
   //////


   //Some Error Checking Assertions

   //Define a Less Than Property
   //
   //  a should be less than b
   property rb_lt( rst, a , b , c );
      @(posedge clk) rst | ((a<=b) | !c);
   endproperty

   //Check that Proposed Sample is in BBox
// Levi commenting these out cuz we jank'd them out with some ... questionable ... logic
   assert property( rb_lt( rst, next_sample_R14S[0] , next_box_R14S[1][0] , next_validSamp_R14H ));
   assert property( rb_lt( rst, next_sample_R14S[1] , next_box_R14S[1][1] , next_validSamp_R14H ));
   assert property( rb_lt( rst, next_box_R14S[0][0] , next_sample_R14S[0] , next_validSamp_R14H ));
   assert property( rb_lt( rst, next_box_R14S[0][1] , next_sample_R14S[1] , next_validSamp_R14H ));
   //Check that Proposed Sample is in BBox

   //Error Checking Assertions

   //; } else { # use Modified FSM

   //////
   //////  RTL code for modified FSM Goes Here
   //////

   ////// PLACE YOUR CODE HERE

   //////
   //////  RTL code for modified FSM Finishes
   //////
   //; }


endmodule



